#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from telegram.ext import CommandHandler, MessageHandler, filters
from utils import save_user_data, load_user_data, create_excel_file
from config import MAX_FIELDS_FREE, MAX_FIELDS_VIP
from vip import setup_vip_handlers

logger = logging.getLogger(__name__)

async def start_command(update, context):
    user_id = update.effective_user.id
    username = update.effective_user.username or "User"
    
    user_data = load_user_data(user_id)
    if not user_data:
        user_data = {
            "user_id": user_id,
            "username": username,
            "join_date": datetime.now().isoformat(),
            "is_vip": False,
            "files_created": 0,
        }
        save_user_data(user_data)
    
    welcome_text = f"""Welcome {username}!

Excel Bot Ready

Usage: Send fields separated by comma
Example: name,age,city,phone

Max fields: {MAX_FIELDS_FREE} (free users)"""
    
    await update.message.reply_text(welcome_text)

async def handle_message(update, context):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    user_data = load_user_data(user_id)
    if not user_data:
        await update.message.reply_text("Please send /start first")
        return
    
    fields = [field.strip() for field in text.split(",")]
    fields = [field for field in fields if field]
    
    if not fields:
        await update.message.reply_text("No fields found!")
        return
    
    max_fields = MAX_FIELDS_VIP if user_data.get("is_vip") else MAX_FIELDS_FREE
    if len(fields) > max_fields:
        await update.message.reply_text(f"Max {max_fields} fields allowed!")
        return
    
    processing_msg = await update.message.reply_text("Creating Excel file...")
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"excel_{user_id}_{timestamp}.xlsx"
        filepath = create_excel_file(fields, filename)
        
        if filepath and os.path.exists(filepath):
            with open(filepath, "rb") as file:
                await update.message.reply_document(
                    document=file,
                    filename=filename,
                    caption="Excel file ready!"
                )
            
            user_data["files_created"] = user_data.get("files_created", 0) + 1
            save_user_data(user_data)
            
            try:
                os.remove(filepath)
            except:
                pass
        else:
            await processing_msg.edit_text("Error creating file!")
            return
        
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await processing_msg.edit_text("Error creating file!")

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    setup_vip_handlers(application)
    logger.info("All handlers setup complete")
